// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  firstName    String         @db.VarChar(255)
  lastName     String         @db.VarChar(255)
  email        String         @unique @db.VarChar(255)
  password     String
  country      String         @db.VarChar(255)
  town         String         @db.VarChar(255)
  phoneNumber  Int            @db.Integer
  role         RoleEnumType   @default(user)
  refreshToken String?        @unique @db.VarChar(255)
  cart         CartItem[]
  wishList     WishListItem[]
}

enum RoleEnumType {
  user
  admin
}

model CartItem {
  id        Int     @id @unique @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  productId Int
  quantity  Int
  color     String
  size      String
}

model Message {
  id         Int      @id @unique @default(autoincrement())
  senderMail String
  senderName String
  subject    String
  body       String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id                Int              @id @unique @default(autoincrement())
  name              String
  cover             Int
  description       String           @db.Text()
  price             Int
  images            String[]
  categories        Category[]
  sizes             String[]
  colors            String[]
  availableQuantity Int
  soldOut           Boolean
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  genders           GenderEnumType[]
  cartItem          CartItem[]
  wishListItem      WishListItem?
  cities            String[]
}

enum GenderEnumType {
  woman
  man
  child
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  image     String?
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Size {
  id    Int    @id @default(autoincrement())
  label String
}

model Color {
  id   Int    @id @default(autoincrement())
  code String
}

model City {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model DeliveryMan {
  id            Int                   @id @default(autoincrement())
  lastName      String
  firstName     String
  dateOfBirth   DateTime
  country       String
  town          String
  email         String                @unique
  phoneNumber   String
  postalCode    String
  maritalStatus MaritalStatusType
  status        DeliveryManStatusType @default(unset)
  password      String?
}

enum DeliveryManStatusType {
  unset
  accepted
  rejected
}

enum MaritalStatusType {
  single
  married
}

model WishListItem {
  id        Int     @id @default(autoincrement())
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @unique
}
